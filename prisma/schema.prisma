generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")
  user               User      @relation(fields: [userId], references: [id])

  @@index([providerAccountId], map: "providerAccountId")
  @@index([providerId], map: "providerId")
  @@index([userId], map: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verificationToken")
}

model ActionItems {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  userId      Int
  status      Status    @default(PENDING)
  priority    Int?
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Users       User      @relation(fields: [userId], references: [id])
}

model BlogPosts {
  id            Int       @id @default(autoincrement())
  title         String
  slug          String    @unique
  content       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  userId        Int
  siteId        Int
  author        String
  category      String
  publishedDate DateTime?
  status        String
  Sites         Sites     @relation(fields: [siteId], references: [id])
  Users         User      @relation(fields: [userId], references: [id])
}

model Comments {
  id        Int       @id @default(autoincrement())
  userId    Int
  projectId Int?
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  Projects  Projects? @relation(fields: [projectId], references: [id])
  Users     User      @relation(fields: [userId], references: [id])
}

model Notifications {
  id        Int              @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      NotificationType @default(INFO)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  Users     User             @relation(fields: [userId], references: [id])
}

model Projects {
  id          Int        @id @default(autoincrement())
  title       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  userId      Int
  siteId      Int?
  description String?
  domain      String?    @unique
  type        String
  Comments    Comments[]
  Sites       Sites?     @relation(fields: [siteId], references: [id])
  Users       User       @relation(fields: [userId], references: [id])
}

model Roles {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Sites {
  id          Int         @id @default(autoincrement())
  name        String
  domain      String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  userId      Int
  description String
  BlogPosts   BlogPosts[]
  Projects    Projects[]
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  createdAt      DateTime        @default(now())
  businessType   String?
  companyName    String?
  phoneNumber    String?
  roleId         Int
  email_verified DateTime?
  image          String?
  updated_at     DateTime        @default(now())
  ActionItems    ActionItems[]
  BlogPosts      BlogPosts[]
  Comments       Comments[]
  Notifications  Notifications[]
  Projects       Projects[]
  accounts       Account[]
  sessions       Session[]
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}
