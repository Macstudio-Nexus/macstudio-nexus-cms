generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ActionItems {
  id          String    @id @default(cuid())
  title       String
  description String
  userId      String
  status      Status    @default(PENDING)
  priority    Int?
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Users       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPosts {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  content       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  userId        String
  siteId        String
  author        String
  category      String
  publishedDate DateTime?
  status        String
  Sites         Sites     @relation(fields: [siteId], references: [id])
  Users         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comments {
  id        String    @id @default(cuid())
  userId    String
  projectId String?
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  Projects  Projects? @relation(fields: [projectId], references: [id])
  Users     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notifications {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  Users     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Projects {
  id          String     @id @default(cuid())
  title       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  userId      String
  siteId      String?
  description String?
  domain      String?    @unique
  type        String
  Comments    Comments[]
  Sites       Sites?     @relation(fields: [siteId], references: [id])
  Users       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Roles {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Sites {
  id          String      @id @default(cuid())
  name        String
  domain      String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  userId      String
  description String?
  BlogPosts   BlogPosts[]
  Projects    Projects[]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  createdAt     DateTime        @default(now())
  businessType  String?
  companyName   String?
  phoneNumber   String?
  image         String?
  emailVerified DateTime?
  updatedAt     DateTime        @default(now()) @updatedAt
  roleId        Int
  accounts      Account[]
  ActionItems   ActionItems[]
  BlogPosts     BlogPosts[]
  Comments      Comments[]
  Notifications Notifications[]
  Projects      Projects[]
  sessions      Session[]
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}
